# coding: utf-8

'''
Francesco Camaglia, June 2020 LPENS
'''

#####################
#  LOADING MODULES  #
#####################

import os, sys
import glob
import pandas as pd
import numpy as np
import optparse

sys.path.append( os.path.realpath( __file__ ).split('kamapack')[0]  )
from kamapack.utils import progress_bar, fileScope

##########
#  MAIN  #
##########

def main( tag, index_col, header, skiprows ) :

    progress_bar( 0., status=0 )

    # >>>>>>>>>>>>>>
    #  INPUT CHECK
    # >>>>>>>>>>>>>>

    if tag == None :
        inputfileList = glob.glob( '*' )
        tag = ""
    else :
        inputfileList = glob.glob( '*' + tag + '*' )

    inputfileList = [ f for f in inputfileList if "STAT-" not in f ]

    #  COMPRESSION & DELIMITER 
    #  infer from extension of first file in list
    in_scope = fileScope( inputfileList[0] )

    #  infer delimiter from extension
    delimiter = in_scope.delimiter
    if delimiter is None:
        raise IOError("Input file extension not recognized: please provide a delimiter.")
    compression = in_scope.compression

    #  OUTPUTFILE  
    outputfile = 'STAT-' +tag + '.' + ('.').join( inputfileList[0].split('.')[ 1 : ] )

    # >>>>>>>>>>>>
    #  EXECUTION
    # >>>>>>>>>>>>                

    N = len( inputfileList )

    df_0 = pd.read_csv( inputfileList[ 0 ], header=header, sep=delimiter, compression=compression, index_col=index_col, skiprows=skiprows )

    for c in df_0.columns :
        df_0[ c + "-devStd" ] = np.power( df_0[ c ].values, 2 )

    for i in range( 1, N ) :
        df = pd.read_csv( inputfileList[ i ], header=header, sep=delimiter, compression=compression, index_col=index_col, skiprows=skiprows ) 
        for c in df.columns :
            df_0[ c ] += df[ c ].values
            df_0[ c + "-devStd" ] += np.power( df[ c ].values, 2 )
        progress_bar( i / N, status=1 )

    for c in df_0.columns :
        if "-devStd" not in c :
            df_0[ c + "-devStd" ] = np.sqrt( ( df_0[ c + "-devStd" ].values - np.power( df_0[ c ].values, 2 ) / N ) / (N - 1) )
            df_0[ c ] = df_0[ c ].values / N

    if index_col==None :
        index=False
    else :
        index=True
    df_0.to_csv( outputfile, sep=delimiter, compression=compression, quoting=None, index=index )

    progress_bar( 1., status=2 )
###

################
#  EXECUTABLE  #
################

if __name__ == "__main__" :

    parser = optparse.OptionParser( conflict_handler="resolve" )

    # >>>>>>>>>>
    #  OPTIONS 
    # >>>>>>>>>>
    
    parser.add_option( '-c', '--index_col', action="store", dest = 'index_col', type=int, default=None )
    parser.add_option( '-h', '--header', action='store', dest='header', default=None  )
    parser.add_option( '-t', '--tag', action="store", dest='tag', default=None )
    parser.add_option( '-s', '--skip', action="store", dest='skiprows', type='int', default=0 )

    # >>>>>>>>>>>>>>>>>>>>>
    #  OPTIONS ASSIGNMENT 
    # >>>>>>>>>>>>>>>>>>>>>

    options, args = parser.parse_args()

    main(
        tag = options.tag,
        index_col = options.index_col,
        header = options.header,
        skiprows = skiprows
    )
###
